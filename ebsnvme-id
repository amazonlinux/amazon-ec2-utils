#!/usr/bin/env python

# Copyright Amazon.com, Inc. and its affiliates. All Rights Reserved.
#
# Licensed under the MIT License. See the LICENSE accompanying this file
# for the specific language governing permissions and limitations under
# the License.

"""
Usage:
Read EBS device information and provide information about
the volume.
"""

from __future__ import print_function
import argparse
from ctypes import Structure, c_uint8, c_uint16, \
        c_uint32, c_uint64, c_char, addressof, sizeof
from fcntl import ioctl
import sys
import re

NVME_ADMIN_IDENTIFY = 0x06
NVME_IOCTL_ADMIN_CMD = 0xC0484E41
AMZN_NVME_VID = 0x1D0F
AMZN_NVME_EBS_MN = "Amazon Elastic Block Store"


class nvme_admin_command(Structure):
    _pack_ = 1
    _fields_ = [("opcode", c_uint8),      # op code
                ("flags", c_uint8),       # fused operation
                ("cid", c_uint16),        # command id
                ("nsid", c_uint32),       # namespace id
                ("reserved0", c_uint64),
                ("mptr", c_uint64),       # metadata pointer
                ("addr", c_uint64),       # data pointer
                ("mlen", c_uint32),       # metadata length
                ("alen", c_uint32),       # data length
                ("cdw10", c_uint32),
                ("cdw11", c_uint32),
                ("cdw12", c_uint32),
                ("cdw13", c_uint32),
                ("cdw14", c_uint32),
                ("cdw15", c_uint32),
                ("reserved1", c_uint64)]


class nvme_identify_controller_amzn_vs(Structure):
    _pack_ = 1
    _fields_ = [("bdev", c_char * 32),  # block device name
                ("reserved0", c_char * (1024 - 32))]


class nvme_identify_controller_psd(Structure):
    _pack_ = 1
    _fields_ = [("mp", c_uint16),       # maximum power
                ("reserved0", c_uint16),
                ("enlat", c_uint32),     # entry latency
                ("exlat", c_uint32),     # exit latency
                ("rrt", c_uint8),       # relative read throughput
                ("rrl", c_uint8),       # relative read latency
                ("rwt", c_uint8),       # relative write throughput
                ("rwl", c_uint8),       # relative write latency
                ("reserved1", c_char * 16)]


class nvme_identify_controller(Structure):
    _pack_ = 1
    _fields_ = [("vid", c_uint16),          # PCI Vendor ID
                ("ssvid", c_uint16),        # PCI Subsystem Vendor ID
                ("sn", c_char * 20),        # Serial Number
                ("mn", c_char * 40),        # Module Number
                ("fr", c_char * 8),         # Firmware Revision
                ("rab", c_uint8),           # Recommend Arbitration Burst
                ("ieee", c_uint8 * 3),      # IEEE OUI Identifier
                ("mic", c_uint8),           # Multi-Interface Capabilities
                ("mdts", c_uint8),          # Maximum Data Transfer Size
                ("reserved0", c_uint8 * (256 - 78)),
                ("oacs", c_uint16),         # Optional Admin Command Support
                ("acl", c_uint8),           # Abort Command Limit
                ("aerl", c_uint8),          # Asynchronous Event Request Limit
                ("frmw", c_uint8),          # Firmware Updates
                ("lpa", c_uint8),           # Log Page Attributes
                ("elpe", c_uint8),          # Error Log Page Entries
                ("npss", c_uint8),          # Number of Power States Support
                ("avscc", c_uint8),         # Admin Vendor Specific Command Configuration # noqa
                ("reserved1", c_uint8 * (512 - 265)),
                ("sqes", c_uint8),          # Submission Queue Entry Size
                ("cqes", c_uint8),          # Completion Queue Entry Size
                ("reserved2", c_uint16),
                ("nn", c_uint32),            # Number of Namespaces
                ("oncs", c_uint16),         # Optional NVM Command Support
                ("fuses", c_uint16),        # Fused Operation Support
                ("fna", c_uint8),           # Format NVM Attributes
                ("vwc", c_uint8),           # Volatile Write Cache
                ("awun", c_uint16),         # Atomic Write Unit Normal
                ("awupf", c_uint16),        # Atomic Write Unit Power Fail
                ("nvscc", c_uint8),         # NVM Vendor Specific Command Configuration # noqa
                ("reserved3", c_uint8 * (704 - 531)),
                ("reserved4", c_uint8 * (2048 - 704)),
                ("psd", nvme_identify_controller_psd * 32),  # Power State Descriptor # noqa
                ("vs", nvme_identify_controller_amzn_vs)]  # Vendor Specific

class nvme_identify_namespace_lbaf(Structure):
    _pack_ = 1
    _fields_ = [("ms", c_uint16),
                ("lbads", c_uint8),
                ("rp", c_uint8)]

class nvme_identify_namespace_amzn_vs(Structure):
    _pack_ = 1
    _fields_ = [("bdev", c_char * 32),      # block device name
                ("volid", c_char * 65),     # Volume ID
                ("reserved0", c_char * (3712 - 32 - 65))]

class nvme_identify_namespace(Structure):
    _pack_ = 1
    _fields_ = [("nsze", c_uint64),         # Namespace Size
                ("ncap", c_uint64),         # Namespace Capacity
                ("nuse",c_uint64),          # Namespace Utilization
                ("nsfeat", c_uint8),        # Namespace Features
                ("nlbaf", c_uint8),         # Number of LBA Formats
                ("flbas", c_uint8),         # Formatted LBA Size
                ("mc", c_uint8),            # Metadata Capabilities
                ("dpc", c_uint8),           # End-to-end Data Protection Capabilities
                ("dps", c_uint8),           # Data Protection Type Settings
                ("nmic", c_uint8),          # Namespace Multi-path I/O and Namespace Sharing Capabilities
                ("rescap", c_uint8),        # Reservation Capabilities
                ("rsvd1",c_uint8 * (47 - 32 + 1) ),
                ("nvmcap", c_uint64 * 2),   # NVM Capacity
                ("rsrvd2", c_uint8 * (119 - 64 + 1)),
                ("eui64", c_uint8 * (127 - 120 + 1)),   # Namespace Globally Unique Identifier
                ("lbaf", nvme_identify_namespace_lbaf * 16), # LBA Format
                ("rsvd3", c_uint8 * (383 - 192 + 1)),
                ("vs",nvme_identify_namespace_amzn_vs)] # Vendor Specific

class ebs_nvme_device:
    def __init__(self, device):
        self.device = device
        self.nsid = int(''.join(re.findall('[0-9][0-9]*',
                                ''.join(re.findall('n[0-9][0-9]*',
                                    self.device)))
                            ))
        self.ctrl_identify()
        self.namespace_identify()

    def _nvme_ioctl(self, id_response, id_len, ns, cdw):
        admin_cmd = nvme_admin_command(opcode=NVME_ADMIN_IDENTIFY,
                                       nsid= ns,
                                       addr=id_response,
                                       alen=id_len,
                                       cdw10=cdw)

        with open(self.device, "r+") as nvme:
            ioctl(nvme, NVME_IOCTL_ADMIN_CMD, admin_cmd)

    def ctrl_identify(self):
        self.id_ctrl = nvme_identify_controller()
        self._nvme_ioctl(addressof(self.id_ctrl), sizeof(self.id_ctrl), 0, 1)

        if self.id_ctrl.vid != AMZN_NVME_VID \
                or self.id_ctrl.mn.decode().strip() != AMZN_NVME_EBS_MN:
            raise TypeError("[ERROR] Not an EBS device: '{0}'".format(self.device)) # noqa

    def namespace_identify(self):
        self.id_ns = nvme_identify_namespace()
        self._nvme_ioctl(addressof(self.id_ns), sizeof(self.id_ns), self.nsid, 0)

    def get_volume_id(self):
        vol = self.id_ns.vs.volid.decode().strip()

        if not vol:
            vol = self.id_ctrl.sn.decode()

        if vol.startswith("vol") and vol[3] != "-":
            vol = "vol-" + vol[3:]

        return vol

    def get_block_device(self, stripped=False):
        dev = self.id_ns.vs.bdev.decode().strip()

        if not dev:
            dev = self.id_ctrl.vs.bdev.decode().strip()

        if stripped and dev.startswith("/dev/"):
            dev = dev[5:]

        return dev


if __name__ == "__main__":
    parser = \
        argparse.ArgumentParser(description="Reads EBS information from NVMe devices.") # noqa
    parser.add_argument("device", nargs=1, help="Device to query")

    display = parser.add_argument_group("Display Options")
    display.add_argument("-v", "--volume", action="store_true",
                         help="Return volume-id")
    display.add_argument("-b", "--block-dev", action="store_true",
                         help="Return block device mapping")
    display.add_argument("-u", "--udev", action="store_true",
                         help="Output data in format suitable for udev rules")

    if len(sys.argv) < 2:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()

    get_all = not (args.udev or args.volume or args.block_dev)

    try:
        dev = ebs_nvme_device(args.device[0])
    except (IOError, TypeError) as err:
        print(err, file=sys.stderr)
        sys.exit(1)

    if get_all or args.volume:
        print("Volume ID: {0}".format(dev.get_volume_id()))
    if get_all or args.block_dev or args.udev:
        print(dev.get_block_device(args.udev))
